# Codes for getting NHANES 2017-2018 data 

# Download demographic data with no NA

demo_H = data.table(nhanes('DEMO_J'),YEAR='2017-2018')
bmi_H = data.table(nhanes('BMX_J'), YEAR = '2017-2018')
demo_H = merge(demo_H,bmi_H,by=c("SEQN","YEAR"))

# Download Demographics data with no NA 

demo_H = demo_H[WTMEC2YR>0,.(SEQN,RIAGENDR,RIDAGEYR,WTMEC2YR,INDFMPIR,RIDRETH1,BMXBMI,YEAR)]
demo_H[,SUM_MEC:=sum(demo_H$WTMEC2YR)]
demo_H[, check := rowSums(.SD), .SDcol=c('RIAGENDR','RIDAGEYR','WTMEC2YR', 'INDFMPIR','RIDRETH1','BMXBMI')]
demo_H = demo_H[!is.na(check)]
demo_H[,check:=NULL]

# Download PFCs data with no NA

pfc_H = data.table(nhanes("PFAS_J"),YEAR='2017-2018')
pfc_list <- c("LBXPFDE","LBXPFHS","LBXMPAH","LBXPFNA","LBXPFUA","LBXNFOA","LBXBFOA","LBXNFOS","LBXMFOS")
pfc_H = pfc_H[,c("SEQN",pfc_list,"YEAR"),with=F]
pfc_H[, check := rowSums(.SD), .SDcol=pfc_list]
pfc_H = pfc_H[!is.na(check)]
pfc_H[,check:=NULL]

# Download Metal data with no NA

metal_H = data.table(nhanes("PBCD_J"),YEAR='2017-2018')
metal_list <- c("LBXBCD","LBXBPB","LBXBMN","LBXTHG","LBXBSE")
metal_H = metal_H[,c("SEQN",metal_list,"YEAR"),with=F]
metal_H[, check := rowSums(.SD), .SDcol=metal_list]
metal_H = metal_H[!is.na(check)]
metal_H[,check:=NULL]

# Download HDL, LDL, Trig, glychaemoglobin, insulin,  data with no NA

hdl_H = data.table(nhanes("HDL_J"),YEAR='2017-2018')
trig_H = data.table(nhanes("TRIGLY_J"),YEAR='2017-2018')
tchol_H = data.table(nhanes("TCHOL_J"),YEAR='2017-2018')

bones_H = merge(hdl_H,trig_H,by=c("SEQN","YEAR"))
bones_H = merge(bones_H,tchol_H,by=c("SEQN","YEAR"))

bones_H = bones_H[,.(SEQN,LBXTC,LBXTR,LBDLDL,LBDHDD,YEAR)]
bones_H[, check := rowSums(.SD), .SDcol=c('LBXTC','LBXTR','LBDLDL','LBDHDD')]
bones_H = bones_H[!is.na(check)]
bones_H[,check:=NULL]


# Download smoking status data

SMQ = data.table(nhanes("SMQ_J"),YEAR='2017-2018')
SMQ = SMQ[,.(SEQN,SMQ020,SMQ040,YEAR)]
SMQ = SMQ[!is.na(SMQ020)]
SMQ[,smoking_status:=ifelse(SMQ020==2,0,ifelse(SMQ040==1 | SMQ040==2,2,1))]
SMQ = SMQ[!is.na(smoking_status),.(SEQN,smoking_status,YEAR)]

core_H = Reduce(function(...) merge(...,by=c("SEQN","YEAR")), list(demo_H,pfc_H,metal_H,bones_H,SMQ))
core_H = as.data.frame(core_H)


# These codes are modified based on original codes from Nicolo Foppa Pedretti (https://www.medrxiv.org/content/10.1101/19010710v1)
# Figure 3 and 4 are based on similar codes from Figure 2 but with a different dataset and uses WQS as its main exposure mixture model.
# Below we present the codes for both continuous and binary outcomes for LBDLDL in case of PFAS exposures 

# Optimal impact for Continuous LBDLDL

data = ecc_data
exposures_PFAS = c("LBXPFDE","LBXPFHS","LBXMPAH","LBXPFNA","LBXPFUA","LBXNFOA","LBXNFOS","LBXMFOS")
family = "gaussian"
q = 10; validation = 0; b = 250; seed = 123123123
b1_pos = as.logical(T)
M = 100 
n_optim = 5000   
n_whole = dim(data)[1]
k = 2 + sqrt(2);

wqs_est_optim <- NA_real_
wqs_se_optim <- NA_real_
wqs_pval_est_optim <- NA_real_
wqs_lrt_est_optim  <- NA_real_
delta_value_optim <- NA_real_
R1_optim <- NA_real_
R0_optim <- NA_real_

# LDL_optim_data_equivalence_PFAS <- data.frame(wqs_est = NA_real_, wqs_se = NA_real_, wqs_pval = NA_real_,
#                         lrt = NA_real_, delta_value = NA_real_,
#                         R0 = NA_real_, R1 = NA_real_)

LDL_optim_data_equivalence_PFAS <- read.csv("..../LDL_optim_data_equivalence_PFAS.csv")

for(i in 1:M){
  
  data_optim <- data[sample(rownames(data), n_optim, replace = T),]
  glm_optim <- glm(LBDLDL ~   RIAGENDR + RIDAGEYR + INDFMPIR + WTMEC2YR + RIDRETH1 + BMXBMI
                   + smoking_status,  family = family,  data = data_optim)
  
  wqs_optim <- gwqs(LBDLDL ~ wqs + RIAGENDR + RIDAGEYR + INDFMPIR + WTMEC2YR + RIDRETH1 + BMXBMI
                    + smoking_status, mix_name = exposures_PFAS, data = data_optim,
                    q = q, validation = validation, b = 250, b1_pos = T,signal = "expt", rs = F,
                    family = family, plan_strategy = "multicore", future.seed= T)
  
  summary_wqs_optim <- summary(wqs_optim)
  
  wqs_est_optim  <- summary_wqs_optim$coefficients["wqs","Estimate"]
  wqs_se_optim <- summary_wqs_optim$coefficients["wqs","Std. Error"]
  wqs_pval_est_optim  <- summary_wqs_optim$coefficients["wqs","Pr(>|t|)"]
  wqs_lrt_est_optim = (2*(logLik(wqs_optim$fit) - logLik(glm_optim)))
  delta_value_optim = as.numeric(wqs_lrt_est_optim/n_optim)  * (2*k-1)
  
  LDL_optim_data_equivalence_PFAS <- as.data.frame(rbind(LDL_optim_data_equivalence_PFAS, 
                                                    c(wqs_est_optim,wqs_se_optim,wqs_pval_est_optim,
                                                      wqs_lrt_est_optim,delta_value_optim,
                                                      R0_optim,R1_optim)))
  
  write.csv(LDL_optim_data_equivalence_PFAS, "..../LDL_optim_data_equivalence_PFAS.csv", row.names = F)
  
}


# Optimal impact for Binary LBDLDL

ecc_data$LBDLDL <- ifelse(ecc_data$LBDLDL >= as.numeric(quantile(ecc_data$LBDLDL,0.9)), 1, 0) 



data = ecc_data
family = "binomial"
q = 10; validation = 0; b = 500; seed = 123123123
b1_pos = as.logical(T)
M = 100
n_optim = 5000
n_whole = dim(data)[1]
k = 2 + sqrt(2);

